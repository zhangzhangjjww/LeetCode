A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
m and n will be at most 100.

class Solution {
public:
    int uniquePaths(int m, int n) {
        int** re=new int*[m];
        for(int i=0;i!=m;++i) {
            re[i]=new int[n];
        }
        re[0][0]=1;
        for(int i=1;i!=n;++i) {
            re[0][i]=re[0][i-1];
        }
        for(int i=1;i!=m;++i) {
            re[i][0]=re[i-1][0];
        }
        for(int i=1;i!=m;++i) {
            for(int j=1;j!=n;++j) {
                re[i][j]=re[i][j-1]+re[i-1][j];
            }
        }
        int sum=re[m-1][n-1];
        for(int i=0;i!=m;++i) {
            delete [] re[i];
        }
        delete [] re;
        return sum;
    }
};
