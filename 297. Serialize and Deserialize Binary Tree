erialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


//个人解法，正确，但不能通过，时空消耗较大
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s;
        s+='[';
        if(root==NULL) {
            s+=']';
            return s;
        }
        queue<TreeNode*> q1;
        q1.push(root);
        bool is=true;
        //s+=convert_string(root->val);
        while(!q1.empty()) {
            if(is) {
                queue<TreeNode*> q2;
                is=false;
                while(!q1.empty()) {
                    TreeNode* tmp=q1.front();
                    q1.pop();
                    if(tmp==NULL) {
                        s+=",null";
                        q2.push(NULL);
                        q2.push(NULL);
                    }
                    else {
                        if(tmp==root) {
                            s+=convert_string(tmp->val);
                        }
                        else {
                            s+=','+convert_string(tmp->val);
                        }
                        q2.push(tmp->left);
                        q2.push(tmp->right);
                        is=true;
                    }
                }
                q1=q2;
            }
            else {
                break;
            }
        }
        s+=']';
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()<=2) {
            return NULL;
        }
        vector<string> v;
        string s;
        int i=1;
        while(i<data.size()-1) {
            if(data[i]!=',') {
                s+=data[i];
            }
            else {
                v.push_back(s);
                string tmp;
                s=tmp;
            }
            ++i;
        }
        if(s.size()!=0) {
            v.push_back(s);
        }
        queue<TreeNode*> q;
        queue<int> count;
        TreeNode* p=new TreeNode(convert_int(v[0]));
        TreeNode* root=p;
        q.push(p);
        count.push(0);
        int sz=0;
        while(!q.empty()) {
                queue<TreeNode*> q2;
                queue<int> count2;
                while(!q.empty()) {
                int pos=count.front();
                p=q.front();
                count.pop();
                q.pop();
                int pos_left=2*pos+1;
                int pos_right=2*(pos+1);
                if(pos_left<v.size()&&v[pos_left]!="null") {
                    TreeNode* p_left=new TreeNode(convert_int(v[pos_left]));
                    p->left=p_left;
                    q.push(p_left);
                    count.push(pos_left);
                }
                if(pos_right<v.size()&&v[pos_right]!="null") {
                    TreeNode* p_right=new TreeNode(convert_int(v[pos_right]));
                    p->right=p_right;
                    q.push(p_right);
                    count.push(pos_right);
                }
            }
            q=q2;
            count=count2;
        }
        return root;
    }
    string convert_string(int n) {
        string s;
        if(n==0) {
            s+='0';
            return s;
        }
        long num;
        if(n<0) {
            num=n*long(-1);
            s+='-';
        }
        else {
            num=n;
        }
        while(num!=0) {
            s+=char('0'+num%10);
            num=num/10;
        }
        if(n<0) {
            for(int i=1,j=s.size()-1;i<j;++i,--j) {
                char c=s[i];
                s[i]=s[j];
                s[j]=c;
            }
        }
        else {
            for(int i=0,j=s.size()-1;i<j;++i,--j) {
                char c=s[i];
                s[i]=s[j];
                s[j]=c;
            }
        }
        //cout<<s<<endl;
        return s;
    }
    int convert_int(string s) {
        int re=0;
        int label=1;
        if(s[0]=='-') {
            label=-1;
        }
        for(int i=0;i!=s.size();++i) {
            if(i==0&&s[i]=='-') {
                continue;
            }
            re=re*10+s[i]-'0';
        }
        return re*label;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));



//discuss中的递归解法

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:


    string serialize(TreeNode* root) {
        ostringstream out;
        serialize(root, out);
        return out.str();
    }

    TreeNode* deserialize(string data) {
        istringstream in(data);
        return deserialize(in);
    }

private:

    void serialize(TreeNode* root, ostringstream& out) {
        if (root) {
            out << root->val << ' ';
            serialize(root->left, out);
            serialize(root->right, out);
        } else {
            out << "# ";
        }
    }

    TreeNode* deserialize(istringstream& in) {
        string val;
        in >> val;
        if (val == "#")
            return nullptr;
        TreeNode* root = new TreeNode(stoi(val));
        root->left = deserialize(in);
        root->right = deserialize(in);
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
