Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.

这道题的方法就是用在N-Queens中介绍的常见套路。简单地说思路就是循环处理子问题，对于每个格子，带入不同的9个数，然后判合法，如果成立就递归继续，结束后把数字设回空。大家可以看出代码结构和N-Queens是完全一样的。判合法可以用Valid Sudoku做为subroutine，但是其实在这里因为每次进入时已经保证之前的board不会冲突，所以不需要判断整个盘，只需要看当前加入的数字和之前是否冲突就可以，这样可以大大提高运行效率，毕竟判合法在程序中被多次调用。



class Solution {
public:
    bool search(char c,vector<char>& v) {
        for(int i=0;i!=v.size();++i) {
            if(v[i]==c) {
                return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        //vector<int> tmp;
        for(int i=0;i!=board.size();++i) {
            vector<char> row;
            for(int j=0;j!=board[i].size();++j) {
                if(board[i][j]=='.') {
                    continue;
                }
                if(board[i][j]!='.'&&search(board[i][j],row)) {
                    row.push_back(board[i][j]);
                }
                else {
                    return false;
                }
            }
        }
        for(int i=0;i!=board[0].size();++i) {
            vector<char> col;
            for(int j=0;j!=board.size();++j) {
                if(board[j][i]=='.') {
                    continue;
                }
                if(board[j][i]!='.'&&search(board[j][i],col)) {
                    col.push_back(board[j][i]);
                }
                else {
                    return false;
                }
            }
        }
        for(int i=0;i!=board[0].size();i+=3) {
            for(int j=0;j!=board.size();j+=3) {
                vector<char> grid;
                for(int k1=i;k1!=i+3;++k1) {
                    for(int k2=j;k2!=j+3;++k2) {
                        if(board[k1][k2]=='.') {
                            continue;
                        }
                        if(board[k1][k2]!='.'&&search(board[k1][k2],grid)) {
                            grid.push_back(board[k1][k2]);
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
};
