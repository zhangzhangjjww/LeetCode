Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
Note:
You may assume that all inputs are consist of lowercase letters a-z.



如果还按照DFS回溯的方法，逐个检查每个word是否在board里，显然效率是比较低的。我们可以利用Trie数据结构，也就是前缀树。然后dfs时，如果当前形成的单词不在Trie里，就没必要继续dfs下去了。如果当前字符串在trie里，就说明board可以形成这个word。


class Solution {
public:
class Trie {
private:
    struct Node {
        Node* next[26];
        string s;
        char c;
        Node() {for(int i=0;i!=26;++i) next[i]=NULL;}
    };
    Node* root;
public:
    /** Initialize your data structure here. */
    Trie():root(NULL) {
        root=new Node();
        root->c='.';
    }
    ~Trie() {
        delete_trie(root);
    }
    void delete_trie(Node* p) {
        if(p!=NULL) {
            for(int i=0;i!=26;++i) {
                if(p->next!=NULL) {
                    delete_trie(p->next[i]);
                }
            }
            delete p;
        }
    }
    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* p=root;
        for(int i=0;i<word.size();++i) {
            if(p->next[word[i]-'a']==NULL) {
                p->next[word[i]-'a']=new Node();
                p->next[word[i]-'a']->c=word[i];
            }
            if(i==word.size()-1) {
                p->next[word[i]-'a']->s=word;
            }
            p=p->next[word[i]-'a'];
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* p=root;
        for(int i=0;i!=word.size();++i) {
            if(p->next[word[i]-'a']!=NULL) {
                if(i==word.size()-1) {
                    if(p->next[word[i]-'a']->s==word) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                p=p->next[word[i]-'a'];
            }
            else {
                return false;
            }
        }
        return false;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* p=root;
        for(int i=0;i!=prefix.size();++i) {
            if(p->next[prefix[i]-'a']!=NULL) {
                p=p->next[prefix[i]-'a'];
            }
            else {
                return false;
            }
        }
        return true;
    }
};
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> re;
        map<string,int> overlap;
        Trie* trie=new Trie();
        for(int i=0;i!=words.size();++i) {
            trie->insert(words[i]);
        }
        int m=board.size();
        int n=board[0].size();
        bool** visit=new bool*[m];
        for(int i=0;i!=m;++i) {
            visit[i]=new bool[n];
        }
        for(int i=0;i!=m;++i) {
            for(int j=0;j!=n;++j) {
                visit[i][j]=false;
            }
        }
        for(int i=0;i!=m;++i) {
            for(int j=0;j!=n;++j) {
                dfs(re,overlap,"",i,j,board,visit,trie);
            }
        }
        for(int i=0;i!=m;++i) {
            delete [] visit[i];
        }
        delete [] visit;
        delete trie;
        return re;
    }
    void dfs(vector<string>& re,map<string,int>& overlap,string s,int i,int j,vector<vector<char>>& board,bool** visit,Trie* trie) {
        if(i<0||i>=board.size()||j<0||j>=board[0].size()) {
            return;
        }
        if(visit[i][j]) {
            return;
        }
        s+=board[i][j];
        if(!trie->startsWith(s)) {
            return;
        }
        if(trie->search(s)) {
            if(overlap.count(s)==0) {
                re.push_back(s);
                overlap[s]=1;
            }
        }
        visit[i][j]=true;
        dfs(re,overlap,s,i+1,j,board,visit,trie);
        dfs(re,overlap,s,i-1,j,board,visit,trie);
        dfs(re,overlap,s,i,j+1,board,visit,trie);
        dfs(re,overlap,s,i,j-1,board,visit,trie);
        visit[i][j]=false;
    }
    
};
