Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].


The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given heights = [2,1,5,6,2,3],
return 10.

使用动态规划，用left[i]表示第i个柱子可以最多向左延伸至第left[i]个柱子，形成一个矩形，right[i]则表示向右延伸。遍历两次，分别计算出这两个数组。

再遍历一次，即可求出所有的柱子可以形成的最大的矩形面积。为了减少边界的判断，可以使用哨兵，在两端添加两个柱子高度都为-1.


方法二：此解法的核心思想为：一次性计算连续递增的区间的最大面积，并且考虑完成这个区间之后，考虑其前、后区间的时候，不会受到任何影响。也就是这个连续递增区间的最小高度大于等于其前、后区间。
假设输入直方图为：int[] height = {2,7,5,6,4}.
这个方法运行的时候，当遇到height[2] == 5的时候，发现其比之前一个高度小，则从当前值（5）开始，向左搜索比当前值小的值。当搜索到最左边（2）时，比5小，此时计算在height[0]和height[2]之间的最大面积，注意不包括height[0]和和height[2]。height[1]以红色标出的这个区域就被计算完成。同样的方法，计算出绿色和粉色的面积。
因此这个方法需要使用两个栈。第一个栈为高度栈heightStack，用于记录还没有被计算过的连续递增的序列的值。第二个栈为下标栈indexStack，用于记录高度栈中对应的每一个高度的下标，以计算宽度。
算法具体执行的步骤为：
若heightStack为空或者当前高度大于heightStack栈顶，则当前高度和当前下标分别入站。所以heightStack记录了一个连续递增的序列。
若当前高度小于heightStack栈顶，heightStack和indexStack出栈，直到当前高度大于等于heightStack栈顶。出栈时，同时计算区间所形成的最大面积。注意计算完之后，当前值入栈的时候，其对应的下标应该为最后一个从indexStack出栈的下标。比如height[2]入栈时，其对应下标入栈应该为1，而不是其本身的下标2。如果将其本身下标2入栈，则计算绿色区域的最大面积时，会忽略掉红色区域。


public:
    int largestRectangleArea(vector<int>& heights) {
        if(heights.size()==0) {
            return 0;
        }
        /*int* left=new int[heights.size()+1];
        int* right=new int[heights.size()+1];
        vector<int> tmp;
        tmp.push_back(-1);
        for(int i=0;i!=heights.size();++i) {
            tmp.push_back(heights[i]);
        }
        tmp.push_back(-1);
        for(int i=1;i!=tmp.size()-1;++i) {
            int k=i;
            while(tmp[i]<=tmp[k-1]) {
                k=left[k-1];
            }
            left[i]=k;
        }
        for(int i=tmp.size()-2;i!=0;--i) {
            int k=i;
            while(tmp[i]<=tmp[k+1]) {
                k=right[k+1];
            }
            right[i]=k;
        }
        int max=0;
        for(int i=1;i!=heights.size()+1;++i) {
            int area=(right[i]-left[i]+1)*heights[i-1];
            if(area>max) {
                max=area;
            }
        }
        delete [] left;delete [] right;
        return max;*/
        stack<int> high,pos;
        int max=0;
        for(int i=0;i!=heights.size();++i) {
            if(high.empty()||heights[i]>=high.top()) {
                high.push(heights[i]);
                pos.push(i);
            }
            else {
                //if(hi)
                int j=0;
                while(!high.empty()&&high.top()>heights[i]) {
                    j=pos.top();
                    int area=(i-j)*high.top();
                    if(area>max) {
                        max=area;
                    }
                    high.pop();
                    pos.pop();
                }
                high.push(heights[i]);
                pos.push(j);
            }
        }
        while(!high.empty()) {
            int area=(heights.size()-pos.top())*high.top();
            if(area>max) {
                max=area;
            }
            pos.pop();
            high.pop();
        }
        return max;
    }
};
