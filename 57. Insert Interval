Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> re;
        if(intervals.empty()) {
            re.push_back(newInterval);
            return re;
        }
        /*if(newInterval.end<intervals[0].start) {
            re.push_back(newInterval);
            for(int i=0;i!=intervals.size();++i) {
                re.push_back(intervals[i]);
            }
            return re;
        }*/
        int i;
        bool is_overlap=false;
        for(i=0;i!=intervals.size();++i) {
            if((intervals[i].start<newInterval.start&&newInterval.start<=intervals[i].end&&intervals[i].end<newInterval.end)||(intervals[i].start>newInterval.start&&newInterval.end>=intervals[i].start&&intervals[i].end>newInterval.end)) {
                Interval tmp;
                tmp.start=intervals[i].start<newInterval.start?intervals[i].start:newInterval.start;
                tmp.end=intervals[i].end>newInterval.end?intervals[i].end:newInterval.end;
                re.push_back(tmp);
                break;
            }
            if((intervals[i].start<=newInterval.start&&newInterval.end<=intervals[i].end)||newInterval.start<=intervals[i].start&&intervals[i].end<=newInterval.end) {
                Interval tmp;
                tmp.start=intervals[i].start<newInterval.start?intervals[i].start:newInterval.start;
                tmp.end=intervals[i].end>newInterval.end?intervals[i].end:newInterval.end;
                re.push_back(tmp);
                break;
            }
            if(newInterval.end<intervals[i].start) {
                re.push_back(newInterval);
                re.push_back(intervals[i]);
                break;
            }
            re.push_back(intervals[i]);
        }
        if(i==intervals.size()) {
            re.push_back(newInterval);
            return re;
        }
        else {
            for(int j=i+1;j<intervals.size();++j) {
                solve(re,intervals[j]);
            }
            return re;
        }
    }
    void solve(vector<Interval>& re,Interval in) {
        Interval tmp=re[re.size()-1];
        if(tmp.start<in.start&&in.start<=tmp.end&&tmp.end<in.end) {
            re[re.size()-1].end=in.end;
            return;
        }
        if(tmp.start<=in.start&&in.end<=tmp.end) {
            return;
        }
        else {
            re.push_back(in);
        }
    }
};
