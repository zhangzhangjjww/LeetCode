Given a string S and a string T, count the number of distinct subsequences of S which equals T.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.


class Solution {
public:
    int numDistinct(string s, string t) {
        if(s.size()==t.size()) {
            if(s==t) {
                return 1;
            }
            else {
                return 0;
            }
        }
        if(s.size()<t.size()) {
            return 0;
        }
        int** re=new int*[s.size()];
        for(int i=0;i!=s.size();++i) {
            re[i]=new int[t.size()];
        }
        for(int i=0;i!=s.size();++i) {
            for(int j=0;j!=t.size();++j) {
                re[i][j]=0;
            }
        }
        if(s[0]==t[0]) {
            re[0][0]=1;
        }
        for(int i=1;i!=s.size();++i) {
            if(s[i]==t[0]) {
                re[i][0]=re[i-1][0]+1;
            }
            else {
                re[i][0]=re[i-1][0];
            }
        }
        if(re[s.size()-1][0]==0) {
            return 0;
        }
        for(int j=1;j<t.size();++j) {
            for(int i=1;i<s.size();++i) {
                if(i<j) {
                    re[i][j]=0;
                }
                else {
                    if(s[i]==t[j]) {
                        re[i][j]=re[i-1][j]+re[i-1][j-1];
                    }
                    else {
                        re[i][j]=re[i-1][j];
                    }
                }
            }
        }
        int sum=re[s.size()-1][t.size()-1];
        for(int i=0;i!=s.size();++i) {
            delete [] re[i];
        }
        delete [] re;
        return sum;
    }
};
