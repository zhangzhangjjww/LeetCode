Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.size()==0) {
            return 0;
        }
        int n=triangle.size();
        vector<int> re(n,0);
        //re[0]=trangle[0][0];
        for(int i=0;i!=n;++i) {
            vector<int> tmp=re;
            tmp[0]=triangle[i][0]+re[0];
            for(int j=1;j<i;++j) {
                if(re[j-1]+triangle[i][j]<=re[j]+triangle[i][j]) {
                    tmp[j]=re[j-1]+triangle[i][j];
                }
                else {
                    tmp[j]=re[j]+triangle[i][j];
                }
            }
            if(i!=0) {
                tmp[i]=re[i-1]+triangle[i][i];
            }
            re=tmp;
        }
        int t=re[0];
        for(int i=0;i!=n;++i) {
            if(t>re[i]) {
                t=re[i];
            }
        }
        return t;
    }
};
