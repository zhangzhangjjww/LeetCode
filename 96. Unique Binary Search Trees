Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
   class Solution {
public:
    int numTrees(int n) {
        if(n<=0) {
            return 0;
        }
        int* re=new int[n+1];
        for(int i=0;i!=n+1;++i) {
            re[i]=0;
        }
        re[0]=1;
        re[1]=1;
        solve(re,n);
        int tmp=re[n];
        delete [] re;
        return tmp;
    }
    int solve(int* re,int n) {
        if(re[n]!=0) {
            return re[n];
        }
        else {
            for(int i=0;i!=n;++i) {
                re[n]=re[n]+solve(re,i)*solve(re,n-i-1);
            }
            return re[n];
        }
    }
};
