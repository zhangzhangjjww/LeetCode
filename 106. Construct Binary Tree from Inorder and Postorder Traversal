Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
       if(inorder.size()==0) {
           return NULL;
       } 
       int pos=postorder.size()-1;
       int q=pos;
       TreeNode* root=new TreeNode(postorder[pos]);
       --pos;
       for(int i=0;i!=inorder.size();++i) {
           if(inorder[i]==postorder[pos+1]) {
               q=i;
               break;
           }
       }
       root->right=solve(inorder,postorder,q+1,inorder.size()-1,pos);
       root->left=solve(inorder,postorder,0,q-1,pos);
       return root;
    }
    TreeNode* solve(vector<int>& inorder,vector<int>& postorder,int p,int r,int& pos) {
        if(p<=r&&pos>-1) {
            TreeNode* tmp=new TreeNode(postorder[pos]);
            int q=r;
            for(int i=p;i!=r+1;++i) {
                if(inorder[i]==postorder[pos]) {
                    q=i;
                    break;
                }
            }
            --pos;
            tmp->right=solve(inorder,postorder,q+1,r,pos);
            tmp->left=solve(inorder,postorder,p,q-1,pos);
            return tmp;
        }
        else {
            return NULL;
        }
    }
};
