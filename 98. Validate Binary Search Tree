Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    struct test {
      bool is;
      vector<int> vol;
    };
    bool isValidBST(TreeNode* root) {
        if(root==NULL) {
            return true;
        }
        test tmp=solve(root);
        bool re=tmp.is;
        return re;
    }
    test solve(TreeNode* p) {
        if(p==NULL||(p->left==NULL&&p->right==NULL)) {
            test tmp;
            if(p!=NULL) {
                tmp.vol.push_back(p->val);
            }
            tmp.is=true;
            return tmp;
        }
        TreeNode* l=p->left;
        TreeNode* r=p->right;
        test pre_l=solve(l);
        test pre_r=solve(r);
        test tmp;
        if(pre_l.is&&pre_r.is) {
            int i=0,j=0;
            for(;i!=pre_l.vol.size();++i) {
                if(pre_l.vol[i]>=p->val) {
                    break;
                }
            }
            for(;j!=pre_r.vol.size();++j) {
                if(pre_r.vol[j]<=p->val) {
                    break;
                }
            }
            if(i!=pre_l.vol.size()||j!=pre_r.vol.size()) {
                tmp.is=false;
                return tmp;
            }
            else {
                tmp.vol=pre_l.vol;
                for(int k=0;k!=pre_r.vol.size();++k) {
                    tmp.vol.push_back(pre_r.vol[k]);
                }
                tmp.vol.push_back(p->val);
                tmp.is=true;
                return tmp;
            }
        }
        else {
            tmp.is=false;
            return tmp;
        }
    }
};
