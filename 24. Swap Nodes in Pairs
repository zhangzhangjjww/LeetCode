Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL||head->next==NULL) {
            return head;
        }
        ListNode* first=NULL,*second=NULL,*pre=NULL;
        ListNode* hh=NULL;
        pre=head;
        first=head->next;
        second=first->next;
        hh=first;
        first->next=pre;
        pre->next=second;
        first=second;
        if(first!=NULL) {
        second=first->next;}
        else {
            second=NULL;
        }
        while(first&&second) {
            pre->next=second;
            ListNode* tmp=second->next;
            second->next=first;
            first->next=tmp;
            pre=first;
            first=tmp;
            if(first!=NULL) {
            second=first->next;
            }
            else {
                second=NULL;
            }
        }
        return hh;
        
    }
};
