Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> re;
        if(root==NULL) {
            return re;
        }
        queue<TreeNode*> q1;
        q1.push(root);
        while(!q1.empty()) {
            queue<TreeNode*> q2;
            vector<int> v;
            while(!q1.empty()) {
                TreeNode* tmp=q1.front();
                if(tmp->left) {
                    q2.push(tmp->left);
                }
                if(tmp->right) {
                    q2.push(tmp->right);
                }
                v.push_back(tmp->val);
                q1.pop();
            }
            re.push_back(v);
            q1=q2;
        }
        return re;
    }
};
