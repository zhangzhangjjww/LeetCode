Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> re;
        if(root==NULL) {
            return re;
        }
        vector<int> v;
        solve(re,v,root,sum);
        return re;
    }
    void solve(vector<vector<int>>& re,vector<int> v,TreeNode* p,int sum) {
        if(p->left==NULL&&p->right==NULL) {
            if(p->val==sum) {
                v.push_back(p->val);
                re.push_back(v);
            }
        }
        else {
            if(p->left!=NULL) {
                vector<int> v2=v;
                v2.push_back(p->val);
                solve(re,v2,p->left,sum-p->val);
            }
            if(p->right!=NULL) {
                vector<int> v3=v;
                v3.push_back(p->val);
                solve(re,v3,p->right,sum-p->val);
            }
        }
    }
};
