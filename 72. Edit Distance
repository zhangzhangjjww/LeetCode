Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

class Solution {
public:
    int minDistance(string word1, string word2) {
        if(word1.size()==0&&word2.size()==0) {
            return 0;
        }
        if(word1.size()==0&&word2.size()!=0) {
            return word2.size();
        }
        if(word1.size()!=0&&word2.size()==0) {
            return word1.size();
        }
        int** re=new int*[word1.size()];
        for(int i=0;i!=word1.size();++i) {
            re[i]=new int[word2.size()];
        }
        for(int i=0;i!=word1.size();++i) {
            for(int j=0;j!=word2.size();++j) {
                re[i][j]=0;
            }
        }
        if(word1[0]==word2[0]) {
            re[0][0]=0;
        }
        else {
            re[0][0]=1;
        }
        for(int i=1;i!=word1.size();++i) {
            if(re[i-1][0]==i-1) {
                re[i][0]=re[i-1][0]+1;
            }
            else {
                if(re[i-1][0]==i) {
                    if(word1[i]==word2[0]) {
                        re[i][0]=re[i-1][0];
                    }
                    else {
                        re[i][0]=re[i-1][0]+1;
                    }
                }
            }
        }
        for(int i=1;i!=word2.size();++i) {
            if(re[0][i-1]==i&&word2[i]==word1[0]) {
                re[0][i]=re[0][i-1];
            }
            else {
                re[0][i]=re[0][i-1]+1;
            }
        }
        for(int i=1;i!=word1.size();++i) {
            for(int j=1;j!=word2.size();++j) {
                int insert;
                int replace;
                int dele;
                if(word1[i]==word2[j]) {
                    replace=re[i-1][j-1];
                }
                else {
                    replace=re[i-1][j-1]+1;
                }
                insert=re[i][j-1]+1;
                dele=re[i-1][j]+1;
                re[i][j]=min(replace,insert,dele);
            }
        }
        int sum=re[word1.size()-1][word2.size()-1];
        for(int i=0;i!=word1.size();++i) {
            delete [] re[i];
        }
        delete [] re;
        return sum;
    }
    int min(int a,int b,int c) {
        if(a<=b&&a<=c) {
            return a;
        }
        if(b<=a&&b<=c) {
            return b;
        }
        if(c<=a&&c<=b) {
            return c;
        }
    }
};
