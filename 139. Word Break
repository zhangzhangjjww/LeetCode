Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".



class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        if(s.size()==0&&wordDict.size()==0) {
            return true;
        }
        if(s.size()==0&&wordDict.size()!=0) {
            return false;
        }
        if(s.size()!=0&&wordDict.size()==0) {
            return false;
        }
        map<string,int> m;
        for(int i=0;i!=wordDict.size();++i) {
            m[wordDict[i]]=1;
        }
        bool **re=new bool*[s.size()];
        for(int i=0;i!=s.size();++i) {
            re[i]=new bool[s.size()];
        }
        for(int i=0;i!=s.size();++i) {
            for(int j=0;j!=s.size();++j) {
                re[i][j]=false;
            }
        }
        for(int len=1;len!=s.size()+1;++len) {
            for(int i=0;i!=s.size()+1-len;++i) {
                int j=i+len-1;
                if(m.count(sub(s,i,j))==1) {
                    re[i][j]=true;
                }
                else {
                    for(int k=i;k!=j;++k) {
                        if(re[i][k]&&re[k+1][j]) {
                            re[i][j]=true;
                        }
                    }
                }
            }
        }
        bool res=re[0][s.size()-1];
        for(int i=0;i!=s.size();++i) {
            delete [] re[i];
        }
        delete [] re;
        return res;
        
    }
    string sub(string& s,int beg,int end) {
        string ss;
        for(int i=beg;i!=end+1;++i) {
            ss+=s[i];
        }
        return ss;
    }
};
