Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.


/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    int maxPoints(vector<Point>& points) {
        if(points.size()==0) {
            return 0;
        }
        map<int,int> row,col;
        map<pair<pair<int,int>,pair<int,int>>,int> line;
        map<pair<int,int>,int> m;
        for(int i=0;i!=points.size();++i) {
            if(row.count(points[i].x)) {
                ++row[points[i].x];
            }
            else {
                row[points[i].x]=1;
            }
            if(col.count(points[i].y)) {
                ++col[points[i].y];
            }
            else {
                col[points[i].y]=1;
            }
            pair<int,int> p;
            p.first=points[i].x;
            p.second=points[i].y;
            if(m.count(p)) {
                ++m[p];
            }
            else {
                m[p]=1;
            }
        }
        map<pair<pair<pair<int,int>,pair<int,int>>,pair<int,int>>,int> oo;
        for(int i=0;i!=points.size()-1;++i) {
            for(int j=i+1;j!=points.size();++j){
                if((points[i].x!=points[j].x)&&(points[i].y!=points[j].y)) {
                    double key1=points[i].x-points[j].x;
                    double key2=points[i].y-points[j].y;
                    pair<int,int> tmp=is(key2,key1);
                    double key3=points[i].y*points[j].x-points[j].y*points[i].x;
                    double key4=points[j].x-points[i].x;
                    pair<int,int> c=is(key3,key4);
                    //cout<<points[i].x<<" "<<points[i].y<<" "<<points[j].x<<" "<<points[j].y<<" "<<tmp<<endl;
                    pair<int,int> p1,p2;
                    p1.first=points[i].x;p1.second=points[i].y;
                    p2.first=points[j].x;p2.second=points[j].y;
                    pair<pair<pair<int,int>,pair<int,int>>,pair<int,int>> pp1,pp2;
                    pair<pair<int,int>,pair<int,int>> l;
                    l.first=tmp;l.second=c;
                    pp1.first=l;pp1.second=p1;
                    pp2.first=l;pp2.second=p2;
                    if(line.count(l)==0) {
                        line[l]=m[p1]+m[p2];
                        oo[pp1]=1;
                        oo[pp2]=1;
                    }
                    else {
                        if(oo.count(pp1)==0) {
                            line[l]+=m[p1];
                            oo[pp1]=1;
                        }
                        if(oo.count(pp2)==0) {
                            line[l]+=m[p2];
                            oo[pp2]=1;
                        }
                    }
                }
            }
        }
        int sum=0;
        for(map<int,int>::iterator i=row.begin();i!=row.end();++i) {
            if(sum<i->second) {
                sum=i->second;
            }
        }
        for(map<int,int>::iterator i=col.begin();i!=col.end();++i) {
            if(sum<i->second) {
                sum=i->second;
            }
        }
        for(map<pair<pair<int,int>,pair<int,int>>,int>::iterator i=line.begin();i!=line.end();++i) {
            if(sum<i->second) {
                sum=i->second;
            }
        }
        return sum;
    }
    pair<int,int> is(int k1,int k2) {
        int z=measure(k1,k2);
        pair<int,int> tmp;
        tmp.first=k1/z;
        tmp.second=k2/z;
        return tmp;
    }
    int measure(int x, int y)  {     
        if(x<0) {
            x=x*-1;
        }
        if(y<0) {
            y=y*-1;
        }
        int z = y;  
        while(x%y!=0)  
        {  
            z = x%y;  
            x = y;  
            y = z;    
        }  
        return z;  
    }  
};
