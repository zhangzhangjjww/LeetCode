Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

栈法 Stack
复杂度
时间 O(N) 空间 O(N)

思路
用Stack的方法本质上和Valid Parentheses是一样的，一个右括号能消去Stack顶上的一个左括号。不同的是，为了能够计算括号对的长度我们还需要记录括号们的下标。这样在弹出一个左括号后，我们可以根据当前坐标减去栈中上一个（也就是Pop过后的Top元素）的坐标来得到该有效括号对的长度


动态规划法 Dynamic Programming
复杂度
时间 O(N) 空间 O(N)

思路
动态规划法将大问题化为小问题，我们不一定要一下子计算出整个字符串中最长括号对，我们可以先从后向前，一点一点计算。假设d[i]是从下标i开始到字符串结尾最长括号对长度，s[i]是字符串下标为i的括号。如果s[i-1]是左括号，如果i + d[i] + 1是右括号的话，那d[i-1] = d[i] + 1。如果不是则为0。如果s[i-1]是右括号，因为不可能有右括号开头的括号对，所以d[i-1] = 0。


class Solution {
public:
    int longestValidParentheses(string s) {
        if(s.size()==0||s.size()==1) {
            return 0;
        }
        int* p=new int[s.size()];
        for(int i=0;i!=s.size();++i) {
            p[i]=0;
        }
        int max=0;
        int pos=s.size();
        for(int i=s.size()-2;i!=-1;--i) {
            if(s[i]=='(') {
                int j=i+1+p[i+1];
                if(j<s.size()&&s[j]==')') {
                    p[i]=2+p[i+1];
                    if(j+1<s.size()) {
                        p[i]+=p[j+1];
                    }
                }
            }
            if(max<p[i]) {
                max=p[i];
            }
        }
        delete [] p;
        return max;
    }
};
