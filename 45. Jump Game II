Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

For example:
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

Note:
You can assume that you can always reach the last index.

这道题是Jump Game的扩展，区别是这道题不仅要看能不能到达终点，而且要求到达终点的最少步数。其实思路和Jump Game还是类似的，只是原来的全局最优现在要分成step步最优和step-1步最优（假设当前步数是step）。当走到超过step-1步最远的位置时，说明step-1不能到达当前一步，我们就可以更新步数，将step+1。时间复杂度仍然是O(n)，空间复杂度也是O(1)。

class Solution {
public:
    int jump(vector<int>& nums) {
        if(nums.empty()||nums.size()==1) {
            return 0;
        }
        if(nums.size()==2) {
            return 1;
        }
        int sz=0;
        int re=0;
        int reach=0;
        int last_reach=0;
        for(int i=0;i<=reach&&i!=nums.size();++i) {
            if(i>last_reach) {
                ++re;
                last_reach=reach;
            }
            if(nums[i]+i>reach) {
                reach=nums[i]+i;
            }
        }
        return re;
    }

};
