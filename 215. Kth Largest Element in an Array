Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.



class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        return random_select(nums,0,nums.size()-1,nums.size()-k+1);
    }
    int random_select(vector<int>& nums,int p,int r,int k) {
        if(p==r) {
            return nums[p];
        }
        int q=random_partition(nums,p,r);
        int rank=q-p+1;
        if(rank==k) {
            return nums[q];
        }
        else {
            if(k<rank) {
                return random_select(nums,p,q-1,k);
            }
            else {
                return random_select(nums,q+1,r,k-rank);
            }
        }
    }
    int random_partition(vector<int>& nums,int p,int r) {
        int tmp=rand()%(r-p)+p;
        int k=nums[r];
        nums[r]=nums[tmp];
        nums[tmp]=k;
        return partition(nums,p,r);
    }
    int partition(vector<int>& nums,int p,int r) {
        int x=nums[r];
        int i=p-1;
        for(int j=p;j!=r;++j) {
            if(nums[j]<=x) {
                ++i;
                int tmp=nums[i];
                nums[i]=nums[j];
                nums[j]=tmp;
            }
        }
        int k=nums[i+1];
        nums[i+1]=nums[r];
        nums[r]=k;
        return i+1;
    }
};
