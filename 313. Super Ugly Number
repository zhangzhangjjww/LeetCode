Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k. For example, [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] is the sequence of the first 12 super ugly numbers given primes = [2, 7, 13, 19] of size 4.

Note:
(1) 1 is a super ugly number for any given primes.
(2) The given numbers in primes are in ascending order.
(3) 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
(4) The nth super ugly number is guaranteed to fit in a 32-bit signed integer.



class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        int m=primes.size();
        if(m==0) {
            return 0;
        }
        vector<int> v(m,0);
        int pos=0;
        vector<int> re;
        re.push_back(1);
        ++pos;
        while(pos<n) {
            int tmp=numeric_limits<int>::max();
            for(int i=0;i!=m;++i) {
                tmp=min(tmp,primes[i]*re[v[i]]);
            }
            for(int i=0;i!=m;++i) {
                if(tmp==primes[i]*re[v[i]]) {
                    ++v[i];
                }
            }
            re.push_back(tmp);
            ++pos;
        }
        return re[n-1];
    }
};
