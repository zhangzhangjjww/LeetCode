Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.


道题用二维数组来存储中间结果已经不行了，需要一个三维数组 dp[i][j][len]，表示从s1的第i个字符开始长度为len的子串，和从s2的第j个字符开始长度为len的子串，是否互为scramble。

初始化为dp[i][j][1] = s1.charAt(i) == s2.charAt(j)，即长度为1的子串是否互为scramble。

三维数组就要三层循环，最终结果为dp[0][0][s1.length()]，即从s1的第0个字符开始长度为s1.length()的子串，即s1本身和s2本身是否互为scramble。

要判断dp[i][j][len]的值，就要把s1从i开始长度为len的串分别从k=1, 2 ... len-1处切开，判断切成的两半和s2同样切成的两半是否互为scramble，只要有一种切法满足条件，那么dp[i][j][len]就为true，否则为false。


class Solution {
public:
    bool isScramble(string s1, string s2) {
        if(s1.size()!=s2.size()) {
            return false;
        }
        if(s1.empty()&&s2.empty()) {
            return true;
        }
        int n=s1.size();
        bool*** re=new bool**[n];
        for(int i=0;i!=n;++i) {
            re[i]=new bool*[n];
        }
        for(int i=0;i!=n;++i) {
            for(int j=0;j!=n;++j) {
                re[i][j]=new bool[n+1];
            }
        }
        for(int i=0;i!=n;++i) {
            for(int j=0;j!=n;++j) {
                for(int k=0;k!=n+1;++k) {
                    re[i][j][k]=false;
                }
            }
        }
        for(int i=0;i!=n;++i) {
            for(int j=0;j!=n;++j) {
                if(s1[i]==s2[j]) {
                    re[i][j][1]=true;
                }
            }
        }
        for(int len=2;len!=n+1;++len) {
            for(int i=0;i!=n+1-len;++i) {
                for(int j=0;j!=n+1-len;++j) {
                    for(int k=1;k!=len;++k) {
                        if((re[i][j][k]&&re[i+k][j+k][len-k])||(re[i][j+len-k][k]&&re[i+k][j][len-k])) {
                            re[i][j][len]=true;
                        }
                    }
                }
            }
        }
        bool tmp=re[0][0][s1.size()];
        for(int i=0;i!=n;++i) {
            for(int j=0;j!=n;++j) {
                delete [] re[i][j];
            }
        }
        for(int i=0;i!=n;++i) {
            delete [] re[i];
        }
        delete [] re;
        return tmp;
    }
    
};
