Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example:

Input: "babad"

Output: "bab"

Note: "aba" is also a valid answer.
Example:

Input: "cbbd"

Output: "bb"


class Solution {
public:
    string longestPalindrome(string s) {
        if(s.empty()||s.size()==1) {
            return s;
        }
        int** re=new int*[s.size()];
        for(int i=0;i!=s.size();++i) {
            re[i]=new int[s.size()];
        }
        for(int i=0;i!=s.size();++i) {
            for(int j=0;j!=s.size();++j) {
                re[i][j]=numeric_limits<int>::min();
            }
        }
        for(int i=0;i<s.size();++i) {
            re[i][i]=1;
        }
        for(int i=0;i!=s.size()-1;++i) {
            if(s[i]==s[i+1]) {
                re[i][i+1]=2;
            }
        }
        if(s.size()>=3) {
        for(int l=3;l!=s.size()+1;++l) {
            for(int i=0;i!=s.size()-l+1;++i) {
                int j=l+i-1;
                if(s[i]==s[j]) {
                    re[i][j]=re[i+1][j-1]+2;
                }
            }
        }}
        int length,pos1,pos2;
        length=0;
        for(int i=0;i!=s.size();++i) {
            for(int j=i;j!=s.size();++j) {
                if(re[i][j]>length) {
                    length=re[i][j];
                    pos1=i;
                    pos2=j;
                }
            }
        }
        string res;
        for(int i=pos1;i!=pos2+1;++i) {
            res=res+s[i];
        }
        for(int i=0;i!=s.size();++i) {
            delete [] re[i];
        }
        delete [] re;
        return res;
    }
};
