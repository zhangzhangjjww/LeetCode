Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
  
  
  class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        if(tokens.size()==0) {
            return 0;
        }
        if(tokens.size()==1) {
            if(is_number(tokens[0])) {
                return translate(tokens[0]);
            }
            else {
                return 0;
            }
        }
        stack<int> re;
        for(int i=0;i!=tokens.size();++i) {
            if(tokens[i]=="+"||tokens[i]=="-"||tokens[i]=="*"||tokens[i]=="/") {
                if(re.size()<2) {
                    return 0;
                }
                int key1=re.top();
                re.pop();
                int key2=re.top();
                re.pop();
                if(tokens[i]=="*") {
                    re.push(key1*key2);
                }
                if(tokens[i]=="+") {
                    re.push(key1+key2);
                }
                if(tokens[i]=="/") {
                    re.push(key2/key1);
                }
                if(tokens[i]=="-") {
                    re.push(key2-key1);
                }
            }
            else {
                if(is_number(tokens[i])) {
                    re.push(translate(tokens[i]));
                }
                else {
                    return 0;
                }
            }
        }
        if(re.size()==1) {
            return re.top();
        }
        else {
            return 0;
        }
    }
    bool is_number(string& s) {
        for(int i=0;i!=s.size();++i) {
            if(i==0&&(s[i]=='-'||s[i]=='+')) {
                continue;
            }
            if(s[i]>='0'&&s[i]<='9') {
                
            }
            else {
                return false;
            }
        }
        return true;
    }
    int translate(string& s) {
        int label=1;
        if(s[0]=='-') {
            label=-1;
        }
        int tmp=0;
        for(int i=0;i!=s.size();++i) {
            if(i==0&&(s[i]=='-'||s[i]=='+')) {
                continue;
            }
            tmp=tmp*10+(s[i]-'0');
        }
        return tmp*label;
    }
};
