iven an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

leetcode求和问题描述(K sum problem)：

K sum的求和问题一般是这样子描述的：给你一组N个数字(比如 vector num), 然后给你一个常数(比如 int target) ，我们的goal是在这一堆数里面找到K个数字，使得这K个数字的和等于target。

注意事项(constraints):

注意这一组数字可能有重复项：比如 1 1 2 3 , 求3sum, 然后 target  = 6, 你搜的时候可能会得到 两组1 2 3, 1 2 3，1 来自第一个1或者第二个1, 但是结果其实只有一组，所以最后结果要去重。

K Sum求解方法, 适用leetcode 2Sum, 3Sum, 4Sum：

方法一： 暴力，就是枚举所有的K-subset, 那么这样的复杂度就是 从N选出K个，复杂度是O(N^K)

方法二： 排序，这个算法可以考虑最简单的case, 2sum，这是个经典问题，方法就是先排序，然后利用头尾指针找到两个数使得他们的和等于target,.
sum的算法复杂度是O(N log N) 因为排序用了N log N以及头尾指针的搜索是线性的，所以总体是O(N log N)，好了现在考虑3sum, 有了2sum其实3sum就不难了，
这样想：先取出一个数，那么我只要在剩下的数字里面找到两个数字使得他们的和等于(target – 那个取出的数)就可以了吧。所以3sum就退化成了2sum, 取出一个数字，
这样的数字有N个，所以3sum的算法复杂度就是O(N^2 ), 注意这里复杂度是N平方，因为你排序只需要排一次，后面的工作都是取出一个数字，然后找剩下的两个数字，
数字是2sum用头尾指针线性扫，这里很容易错误的将复杂度算成O(N^2 log N)，这个是不对的。我们继续的话4sum也就可以退化成3sum问题(copyright @sigmainfy)，
那么以此类推，K-sum一步一步退化，最后也就是解决一个2sum的问题，K sum的复杂度是O(n^(K-1))。 这个界好像是最好的界了，也就是K-sum问题最好也就能做到
O(n^(K-1))复杂度，之前有看到过有人说可以严格数学证明，这里就不深入研究了。

class Solution {
public:
    void max_heapify(vector<int>& v,int i,int heap_size) {
        int l=2*i+1;
        int r=(i+1)*2;
        int largest;
        if(l<heap_size&&v[l]>v[i]) {
            largest=l;
        }
        else {
            largest=i;
        }
        if(r<heap_size&&v[r]>v[largest]) {
            largest=r;
        }
        if(largest!=i) {
            int tmp=v[i];
            v[i]=v[largest];
            v[largest]=tmp;
            max_heapify(v,largest,heap_size);
        }
    }
    void build_max_heap(vector<int>& v) {
        int sz=v.size()/2;
        for(int i=sz;i!=-1;--i) {
            max_heapify(v,i,v.size());
        }
    }
    void heap_sort(vector<int>& v) {
        build_max_heap(v);
        int heap_size=v.size();
        for(int i=v.size()-1;i!=0;--i) {
            int tmp=v[i];
            v[i]=v[0];
            v[0]=tmp;
            heap_size--;
            max_heapify(v,0,heap_size);
        }
    }
    bool test(vector<vector<int>>& vv,vector<int>& v) {
        for(int i=0;i!=vv.size();++i) {
            if(vv[i][0]==v[0]&&vv[i][1]==v[1]&&vv[i][2]==v[2]) {
                return false;
            }
        }
        return true;
    }
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> re;
        if(nums.size()<3) {
            return re;
        }
        heap_sort(nums);
        int current=nums[0];
        for(int i=0;i!=nums.size()-2;++i) {
            int target=-nums[i];
            if(i!=0&&current==nums[i]) {
                continue;
            }
            int m=i+1,n=nums.size()-1;
            while(m<n) {
                vector<int> tmp;
                int sum=nums[m]+nums[n];
                if(sum==target) {
                    tmp.push_back(nums[i]);
                    tmp.push_back(nums[m]);
                    tmp.push_back(nums[n]);
                    if(re.size()==0) {
                        re.push_back(tmp);
                    }
                    else {
                        if(test(re,tmp)) {
                            re.push_back(tmp);
                        }
                    }
                    ++m,--n;
                }
                else {
                    if(sum<target) {
                        ++m;
                    }
                    else {
                        --n;
                    }
                }
            }
            current=nums[i];
        }
        return re;
    }

};
