Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty()) {
            return 0;
        }
        int** re=new int*[obstacleGrid.size()];
        for(int i=0;i!=obstacleGrid.size();++i) {
            re[i]=new int[obstacleGrid[0].size()];
        }
        if(obstacleGrid[0][0]==1) {
            re[0][0]=0;
        }
        else {
            re[0][0]=1;
        }
        for(int i=1;i!=obstacleGrid[0].size();++i) {
            if(obstacleGrid[0][i]==1) {
                re[0][i]=0;
            }
            else {
                re[0][i]=re[0][i-1];
            }
        }
        for(int i=1;i!=obstacleGrid.size();++i) {
            if(obstacleGrid[i][0]==1) {
                re[i][0]=0;
            }
            else {
                re[i][0]=re[i-1][0];
            }
        }
        for(int i=1;i!=obstacleGrid.size();++i) {
            for(int j=1;j!=obstacleGrid[0].size();++j) {
                if(obstacleGrid[i][j]==1) {
                    re[i][j]=0;
                }
                else {
                    re[i][j]=re[i-1][j]+re[i][j-1];
                }
            }
        }
        int sum=re[obstacleGrid.size()-1][obstacleGrid[0].size()-1];
        for(int i=0;i!=obstacleGrid.size();++i) {
            delete [] re[i];
        }
        delete [] re;
        return sum;
    }
};
