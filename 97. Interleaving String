Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.


class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.size()+s2.size()!=s3.size()) {
            return false;
        }
        if(s1.size()==0&&s2.size()==0) {
            if(s3.size()==0) {
                return true;
            }
            else {
                return false;
            }
        }
        if(s1.size()==0&&s2.size()!=0) {
            return s2==s3;
        }
        if(s1.size()!=0&&s2.size()==0) {
            return s1==s3;
        }
        if(s3.size()==0) {
            return false;
        }
        int m=s1.size()+1;
        int n=s2.size()+1;
        bool** re=new bool*[m];
        for(int i=0;i!=m;++i) {
            re[i]=new bool[n];
        }
        for(int i=0;i!=m;++i) {
            for(int j=0;j!=n;++j) {
                re[i][j]=false;
            }
        }
        re[0][0]=true;
        for(int i=1;i!=m;++i) {
            re[i][0]=re[i-1][0]&&(s1[i-1]==s3[i-1]);
        }
        for(int i=1;i!=n;++i) {
            re[0][i]=re[0][i-1]&&(s2[i-1]==s3[i-1]);
        }
        for(int i=1;i!=m;++i) {
            for(int j=1;j!=n;++j) {
                re[i][j]=(re[i-1][j]&&s1[i-1]==s3[i+j-1])||(re[i][j-1]&&s2[j-1]==s3[i+j-1]);
            }
        }
        for(int i=0;i!=m;++i) {
            for(int j=0;j!=n;++j) {
                cout<<re[i][j]<<" ";
            }
            cout<<endl;
        }
        bool tmp=re[m-1][n-1];
        for(int i=0;i!=m;++i) {
            delete [] re[i];
        }
        delete [] re;
        return tmp;
    }
};
