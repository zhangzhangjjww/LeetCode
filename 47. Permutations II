Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> re;
        if(nums.empty()) {
            return re;
        }
        if(nums.size()==1) {
            re.push_back(nums);
            return re;
        }
        sort(nums.begin(),nums.end());
        vector<int> tmp;
        solve(re,nums,tmp);
        return re;
    }
    void solve(vector<vector<int>>& re,vector<int> nums,vector<int> tmp) {
        if(nums.empty()) {
            re.push_back(tmp);
        }
        else {
            for(int i=0;i!=nums.size();++i) {
                if(i!=0&&nums[i]==nums[i-1]) {
                    continue;
                }
                vector<int> tmp2=tmp;
                tmp2.push_back(nums[i]);
                vector<int> tmp3=fix(nums,i);
                solve(re,tmp3,tmp2);
            }
        }
    }
    vector<int> fix(vector<int>& nums,int s) {
        vector<int> tmp;
        for(int i=0;i<s;++i) {
            tmp.push_back(nums[i]);
        }
        for(int i=s+1;i<nums.size();++i) {
            tmp.push_back(nums[i]);
        }
        return tmp;
    }
};
