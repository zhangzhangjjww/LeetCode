Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        if(m==0) {
            return false;
        }
        int n=matrix[0].size();
        if(n==0) {
            return false;
        }
        for(int i=0;i<m;++i) {
            if(target<matrix[i][0]||target>matrix[i][n-1]) {
                continue;
            }
            if(find(matrix[i],0,n-1,target)) {
                return true;
            }
        }
        return false;
    }
    bool find(vector<int>& v,int p,int r,int target) {
        if(p<=r) {
            int q=(p+r)/2;
            if(v[q]==target) {
                return true;
            }
            else {
                if(target<v[q]) {
                    return find(v,p,q-1,target);
                }
                else {
                    return find(v,q+1,r,target);
                }
            }
        }
        else {
            return false;
        }
    }
};
