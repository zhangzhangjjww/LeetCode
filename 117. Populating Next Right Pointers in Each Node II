Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
    
    
    /**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root==NULL) {
            return;
        }
        queue<TreeLinkNode*> q1;
        q1.push(root);
        while(!q1.empty()) {
            queue<TreeLinkNode*> q2;
            while(!q1.empty()) {
                TreeLinkNode* tmp=q1.front();
                if(tmp->left) {
                    q2.push(tmp->left);
                }
                if(tmp->right) {
                    q2.push(tmp->right);
                }
                q1.pop();
                if(!q1.empty()) {
                    TreeLinkNode* tmp2=q1.front();
                    tmp->next=tmp2;
                }
            }
            q1=q2;
        }
    }
};
