Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


class Solution {
public:
    void heapify(vector<int>& v,int i,int heap_size) {
        int l=2*i+1;
        int r=2*(i+1);
        int largest;
        if(l<heap_size&&v[l]>v[i]) {
            largest=l;
        }
        else {
            largest=i;
        }
        if(r<heap_size&&v[r]>v[largest]) {
            largest=r;
        }
        if(largest!=i) {
            int tmp=v[i];
            v[i]=v[largest];
            v[largest]=tmp;
            heapify(v,largest,heap_size);
        }
    }
    void build_max_heap(vector<int>& v) {
        int sz=v.size()/2;
        for(int i=sz;i!=-1;--i) {
            heapify(v,i,v.size());
        }
    }
    void heap_sort(vector<int>& v) {
        int heap_size=v.size();
        build_max_heap(v);
        for(int i=v.size()-1;i!=0;--i) {
            int tmp=v[0];
            v[0]=v[i];
            v[i]=tmp;
            --heap_size;
            heapify(v,0,heap_size);
        }
    }
    bool test(vector<vector<int>>& vv,vector<int>& v) {
        for(int i=0;i!=vv.size();++i) {
            if(vv[i][0]==v[0]&&vv[i][1]==v[1]&&vv[i][2]==v[2]&&vv[i][3]==v[3]) {
                return false;
            }
        }
        return true;
    }
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> re;
        if(nums.size()<4) {
            return re;
        }
        heap_sort(nums);
        int current=nums[0];
        for(int i=0;i!=nums.size()-3;++i) {
            if(i!=0&&current==nums[i]) {
                continue;
            }
            int tar=target-nums[i];
            int current2=nums[i+1];
            for(int j=i+1;j!=nums.size();++j) {
                int tmp=nums[j];
                if(j!=i+1&&current2==nums[j]) {
                    continue;
                }
                int m=j+1;int n=nums.size()-1;
                while(m<n) {
                    int sum=nums[m]+nums[n];
                    vector<int> v;
                    if(sum+nums[j]==tar) {
                        v.push_back(nums[i]);
                        v.push_back(nums[j]);
                        v.push_back(nums[m]);
                        v.push_back(nums[n]);
                        if(re.empty()) {
                            re.push_back(v);
                        }
                        else {
                            if(test(re,v)) {
                                re.push_back(v);
                            }
                        }
                        ++m;--n;
                    }
                    else {
                        if(sum+nums[j]<tar) {
                            ++m;
                        }
                        else {
                            --n;
                        }
                    }
                }
            }
        }
        return re;
    }
};
