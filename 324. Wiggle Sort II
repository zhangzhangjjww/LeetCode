Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example:
(1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6]. 
(2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].

Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?



class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int> v1,v2;
        if(nums.size()%2==0) {
            for(int i=0;i<nums.size()/2;++i) {
                v1.insert(v1.begin(),nums[i]);
            }
            for(int i=nums.size()/2;i<nums.size();++i) {
                v2.insert(v2.begin(),nums[i]);
            }
            int j=0,k=0;
            for(int i=0;i<nums.size();++i) {
                if(i%2==0) {
                    nums[i]=v1[j];
                    ++j;
                }
                else {
                    nums[i]=v2[k];
                    ++k;
                }
            }
        }
        else {
            for(int i=0;i<(nums.size()+1)/2;++i) {
                v1.insert(v1.begin(),nums[i]);
            }
            for(int i=(nums.size()+1)/2;i<nums.size();++i) {
                v2.insert(v2.begin(),nums[i]);
            }
            int j=0,k=0;
            for(int i=0;i<nums.size();++i) {
                if(i%2==0) {
                    nums[i]=v1[j];
                    ++j;
                }
                else {
                    nums[i]=v2[k];
                    ++k;
                }
            }
        }
    }
};
