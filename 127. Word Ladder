Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.


而在本题中在寻找与一个字符串相距为1的的字典中另一个字符串时如果一个个遍历字典消耗时间比较多, 每次时间复杂度是O(n). 在单个字符串不是很长的情况下, 一个个查看改变一个字符然后在字典中查看是否存在效率要更高些, 其时间复杂度是O(k log n), 其中k为单个字符串长度, n为字典长度.
BFS



class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        if(wordList.size()==0) {
            return 0;
        }
        map<string,int> m;
        for(int i=0;i!=wordList.size();++i) {
            if(wordList[i]!=beginWord) {
                m[wordList[i]]=0;
            }
        }
        m[beginWord]=1;
        queue<pair<string,int>> q;
        q.push(make_pair(beginWord,1));
        while(!q.empty()) {
            queue<pair<string,int>> tmp;
            while(!q.empty()) {
                pair<string,int> val=q.front();
                q.pop();
                string str=val.first;
                if(str==endWord) {
                    return val.second;
                }
                for(int i=0;i!=str.size();++i) {
                    char c=str[i];
                    for(int j=0;j!=26;++j) {
                        str[i]=char('a'+j);
                        if(m.count(str)==1&&m[str]==0) {
                            tmp.push(make_pair(str,val.second+1));
                            ++m[str];
                        }
                    }
                    str[i]=c;
                }
            }
            q=tmp;
        }
        return 0;
    }
    
   
};
