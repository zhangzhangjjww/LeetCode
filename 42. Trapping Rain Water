iven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

class Solution {
public:
    struct Set {
        int low;
        int high;
    };
    int search(int start,int last,vector<int>& v) {
        for(int i=start+1;i!=last+1;++i) {
            if(v[i]>=v[start]) {
                return i;
            }
        }
        return v.size();
    }
    int trap(vector<int>& height) {
        int first=height.size();
        if(height.size()<3) {
            return 0;
        }
        for(int i=0;i!=height.size()-1;++i) {
            if(height[i]>height[i+1]) {
                first=i;
                break;
            }
        }
        if(first==height.size()) {
            return 0;
        }
        int last=0;
        for(int i=height.size()-1;i!=0;--i) {
            if(height[i]>height[i-1]) {
                last=i;
                break;
            }
        }
        //cout<<first<<" "<<last<<endl;
        int max=0;
        int re;
        for(int i=0;i!=height.size();++i) {
            if(height[max]<height[i]) {
                max=i;
            }
        }
        cout<<max<<endl;
        if(max==last||max==first) {
            re=result(first,last,height);
        }
        else {
            re=result(first,max,height)+result(max,last,height);
        }
        return re;
    }
    int result(int first,int last,vector<int>& height) {
        if(height[first]>height[last]) {
            for(int i=first,j=last;i<j;++i,--j) {
                int tmp3=height[i];
                height[i]=height[j];
                height[j]=tmp3;
            }
        }
        int count=first;
        vector<Set> vol;
        int re=0;
        while(count<last) {
            int key=search(count,last,height);
            if(key==height.size()) {
                ++count;
            }
            else {
                Set tmp;
                tmp.low=count;
                tmp.high=key;
                count=key;
                vol.push_back(tmp);
            }
        }
        //cout<<vol.size()<<endl;
        if(vol.size()==1) {
            int limit;
            if(height[first]>height[last]) {
                limit=last;
                int minus=0;
                //cout<<limit<<endl;
                for(int j=vol[0].high;j!=vol[0].low;--j) {
                    minus+=height[j];
                }
                re+=height[limit]*(vol[0].high-vol[0].low)-minus;
            }
            else {
                limit=first;
                int minus=0;
                //cout<<limit<<endl;
                for(int j=vol[0].low;j!=vol[0].high;++j) {
                    minus+=height[j];
                }
                re+=height[limit]*(vol[0].high-vol[0].low)-minus;
            }
            return re;
        }
        else {
        for(int i=0;i!=vol.size();++i) {
            int minus=0;
            for(int j=vol[i].low;j!=vol[i].high;++j) {
                minus+=height[j];
            }
            if(vol[i].high==last&&height[last]<height[vol[i-1].high]) {
                re+=height[last]*(vol[i].high-vol[i].low)-minus;
            }
            else {
                re+=height[vol[i].low]*(vol[i].high-vol[i].low)-minus;
            }
            //re+=height[vol[i].low]*(vol[i].high-vol[i].low)-minus;
        }
        return re;
        }
    }
};
