Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.



class MyQueue {
private:
    stack<int> s1;
    stack<int> s2;
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        if(s1.empty()&&s2.empty()) {
            s1.push(x);
        }
        else {
            if(s1.empty()) {
                while(!s2.empty()) {
                    s1.push(s2.top());
                    s2.pop();
                }
                s2.push(x);
                while(!s1.empty()) {
                    s2.push(s1.top());
                    s1.pop();
                }
            }
            else {
                while(!s1.empty()) {
                    s2.push(s1.top());
                    s1.pop();
                }
                s2.push(x);
                while(!s2.empty()) {
                    s1.push(s2.top());
                    s2.pop();
                }
            }
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int key=peek();
        if(s1.empty()) {
            s2.pop();
        }
        else {
            s1.pop();
        }
        return key;
    }
    
    /** Get the front element. */
    int peek() {
        if(s1.empty()) {
            return s2.top();
        }
        else {
           return s1.top();
        }
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty()&&s2.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
