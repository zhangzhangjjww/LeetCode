Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ? k ? BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?



* Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if(root==NULL) {
            return 0;
        }
        vector<int> v;
        inorder(v,root);
        return v[k-1];
    }
    void inorder(vector<int>& v,TreeNode* p) {
        if(p!=NULL) {
            inorder(v,p->left);
            v.push_back(p->val);
            inorder(v,p->right);
        }
    }
};
