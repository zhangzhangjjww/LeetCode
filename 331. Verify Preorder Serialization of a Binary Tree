One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false


//忽略每个节点的最左节点

class Solution {
public:
    bool isValidSerialization(string preorder) {
        if(preorder.size()==0) {
            return true;
        }
        if(preorder.size()==1) {
            if(preorder!="#") {
                return false;
            }
            else {
                return true;
            }
        }
        if(preorder[0]=='#') {
            return false;
        }
        stack<string> point;
        int pos=0;
        bool first=true;
        string s;
        while(pos<preorder.size()) {
            if(preorder[pos]!=',') {
                if(preorder[pos]!='#') {
                    s+=preorder[pos];
                }
                else {
                    if(first) {
                        first=false;
                    }
                    else {
                        if(point.size()==0) {
                            return false;
                        }
                        point.pop();
                    }
                }
            }
            else {
                if(s.size()!=0) {
                    if(first==false) {
                        if(point.size()==0) {
                            return false;
                        }
                        point.pop();
                        first=true;
                    }
                    point.push(s);
                    string temp;
                    s=temp;
                }
            }
            ++pos;
        }
        if(s.size()!=0) {
            point.push(s);
        }
        if(point.size()!=0) {
            return false;
        }
        else {
            return true;
        }
    }
    
    
};
