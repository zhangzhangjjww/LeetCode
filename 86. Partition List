Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head==NULL) {
            return head;
        }
        ListNode* pre=NULL,*p=head;
        ListNode* start=NULL,*end=NULL;
        int exist=0;
        while(p) {
            ListNode* tmp=p->next;
            if(p->val>=x&&exist==0) {
                start=pre;
                end=p;
                ++exist;
            }
            else {
                if(p->val<x) {
                    if(exist!=0) {
                        if(start==NULL) {
                            head=p;
                        }
                        else {
                            start->next=p;
                        }
                        pre->next=p->next;
                        p->next=end;
                        start=p;
                        p=tmp;
                        continue;
                    }
                }
            }
            pre=p;
            p=tmp;
        }
        return head;
    }
};
