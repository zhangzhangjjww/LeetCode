There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

Note:
The solution is guaranteed to be unique.


class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        if(cost.size()==1) {
            if(gas[0]>=cost[0]) {
                return 0;
            }
            else {
                return -1;
            }
        }
        int max=0;
        for(int i=0;i!=gas.size();++i) {
            if(gas[i]>=cost[i]) {
                max=solve(gas,cost,i);
                if(max!=-1) {
                    return i;
                }
            }
        }
        return -1;
    }
    int solve(vector<int>& gas,vector<int>& cost,int pos) {
        int vol=gas[pos]-cost[pos];
        int i=pos+1;
        if(pos==gas.size()-1) {
            i=0;
        }
        while(i!=pos) {
            vol+=gas[i];
            if(vol<cost[i]) {
                return -1;
            }
            vol-=cost[i];
            if(i==gas.size()-1) {
                i=0;
            }
            else {
                ++i;
            }
        }
        return 1;
    }
};
