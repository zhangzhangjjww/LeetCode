Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        queue<TreeNode*> q1,q2;
        search(root,p,q1);
        search(root,q,q2);
        TreeNode* re=root;
        int m=q1.size();
        int n=q2.size();
        for(int i=0;i<m&&i<n;++i) {
            if(q1.front()->val==q2.front()->val) {
                re=q1.front();
            }
            else {
                break;
            }
            q1.pop();
            q2.pop();
        }
        return re;
    }
    void search(TreeNode* root,TreeNode* p,queue<TreeNode*>& q) {
        if(root->val==p->val) {
            q.push(root);
            return;
        }
        else {
            if(root->val<p->val) {
                q.push(root);
                search(root->right,p,q);
            }
            else {
                q.push(root);
                search(root->left,p,q);
            }
        }
    }
};
