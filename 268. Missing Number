Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?



class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int a=0,b=0;
        int n=nums.size()+1;
        for(int i=0;i!=n;++i) {
            a^=i;
        }
        for(int i=0;i!=nums.size();++i) {
            b^=nums[i];
        }
        return a^b;
    }
};
