iven a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> re;
        if(root==NULL) {
            return re;
        }
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            queue<TreeNode*> q2;
            while(!q.empty()) {
                TreeNode* p=q.front();
                if(p->left) {
                    q2.push(p->left);
                }
                if(p->right) {
                    q2.push(p->right);
                }
                q.pop();
                if(q.empty()) {
                    re.push_back(p->val);
                }
            }
            q=q2;
        }
        return re;
    }
};
