Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()==0) {
            return NULL;
        }
        TreeNode* root=new TreeNode(preorder[0]);
        int q=0;
        for(int i=0;i!=inorder.size();++i) {
            if(inorder[i]==preorder[0]) {
                q=i;
                break;
            }
        }
        int pos=1;
        root->left=solve(preorder,inorder,0,q-1,pos);
        root->right=solve(preorder,inorder,q+1,inorder.size()-1,pos);
        return root;
    }
    TreeNode* solve(vector<int>& preorder,vector<int>& inorder,int p,int r,int& pos) {
        if(p<=r&&pos<preorder.size()) {
            TreeNode* tmp=new TreeNode(preorder[pos]);
            ++pos;
            int q=p;
            for(int i=p;i!=r+1;++i) {
                if(inorder[i]==preorder[pos-1]) {
                    q=i;
                    break;
                }
            }
            tmp->left=solve(preorder,inorder,p,q-1,pos);
            tmp->right=solve(preorder,inorder,q+1,r,pos);
            return tmp;
        }
        else {
            return NULL;
        }
    }
};
