Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

先介绍下翻转链表的写法：
1. 首先设置一个前置节点，将前置节点的next设置为头节点，以头节点为当前节点，开始循环
2. 将当前节点的next赋给一个临时节点，然后将当前节点的next指向前置节点，随后依次位移前置节点指针和当前节点指针：前置节点指针指向当前节点，当前节点指针指向临时节点，这样就完成了一次循环
3. 当前置节点指针指向尾节点时，循环结束

有个这个翻转函数之后，只要对链表进行循环，当计数长度不k时，指针继续前进；当计数长度到达k时，将头尾节点作为参数传入翻转函数进行翻转，然后重新拼接到原链表中。直至到达链表末尾。


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void k_reverse(ListNode* head,ListNode* end) {
        ListNode* pre=new ListNode(-1);
        ListNode* pp=pre;
        pre->next=head;
        ListNode* tmp=head;
        while(pre!=end) {
            ListNode* tmp2=head->next;
            head->next=pre;
            pre=head;
            head=tmp2;
        }
        delete pp;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL||k==1||head->next==NULL) {
            return head;
        }
        ListNode* tmp=new ListNode(-1);
        tmp->next=head;
        int count=1;
        ListNode* first=head,*last=head,*pre=tmp,*nn=NULL;
        while(last) {
            if(count==k) {
                nn=last->next;
                k_reverse(first,last);
                pre->next=last;
                first->next=nn;
                pre=first;
                first=nn;
                last=nn;
                count=1;
                continue;
            }
            else {
                last=last->next;
                ++count;
            }
        }
        ListNode* re=tmp->next;
        delete tmp;
        return re;
    }
};
