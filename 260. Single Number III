Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?



遍历一遍，将所有数字异或XOR 起来，结果设为 diff ，出现2次的数可以通过异或消去，留下的那2个数如何分出？

这就像一个分类问题，找到两类的不同特征，就能分出。

diff 其实就是那两个数的异或结果，再变换 diff ，使得 diff 从低位到高位的第一个1留下，其它位置上都置0。这样 a^diff != b^diff 一定成立，就分开了两个数。

举例：a ＝ 3，b ＝5

3的二进制：011
5的二进制：101
3^5 = 6 ＝ 二进制为110
求二进制110的补码，为010，然后110 & 010 = 010

这样就将diff变成了仅有1个1，其它位置都为0的数，且那个1就是a和b第一个不相同的位置，这样就能区分开a和b了。

简而言之：异或就是找不同。



class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> re(2,0);
        cout<<re[0]<<" "<<re[1]<<endl;
        /*map<int,int> m;
        for(int i=0;i!=nums.size();++i) {
            if(m.count(nums[i])==0) {
                m[nums[i]]=1;
            }
            else {
                ++m[nums[i]];
            }
        }
        for(auto i=m.begin();i!=m.end();++i) {
            if(i->second==1) {
                re.push_back(i->first);
            }
        }*/
        int diff=0;
        for(auto i=0;i!=nums.size();++i) {
            diff^=nums[i];
        }
        cout<<diff<<endl;
        diff&=-diff;
        cout<<diff<<endl;
        for(int i=0;i!=nums.size();++i) {
            if((diff&nums[i])==0) {
                re[0]=re[0]^nums[i];
            }
            else {
                re[1]^=nums[i];
            }
        }
        return re;
        /*int diff = accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
        // Get its last set bit
        diff &= -diff;

        // Pass 2 :
        vector<int> rets = {0, 0}; // this vector stores the two numbers we will return
        for (int num : nums)
        {
            if ((num & diff) == 0) // the bit is not set
            {
                rets[0] ^= num;
            }
            else // the bit is set
            {
                rets[1] ^= num;
            }
        }
        return rets;*/
    }
};
