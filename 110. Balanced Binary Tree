Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(root==NULL) {
            return true;
        }
        return solve(root);
    }
    int level(TreeNode* p) {
        if(p==NULL) {
            return 0;
        }
        else {
            int key1=1+level(p->left);
            int key2=1+level(p->right);
            return key1>key2?key1:key2;
        }
    }
    bool solve(TreeNode* p) {
        if(p==NULL) {
            return true;
        } 
        if(solve(p->left)&&solve(p->right)) {
            int key1=level(p->left);
            int key2=level(p->right);
            int tmp=key1>key2?key1-key2:key2-key1;
            if(tmp<2) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
};
