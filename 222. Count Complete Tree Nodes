Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.



用暴力法, recursive求会超时 O(N).   如果从某节点一直向左的高度 = 一直向右的高度, 那么以该节点为root的子树一定是complete binary tree. 而 complete binary tree的节点数,可以用公式算出 2^h - 1. 如果高度不相等, 则递归调用 return countNode(left) + countNode(right) + 1.  复杂度为O(h^2)



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(root==NULL) {
            return 0;
        }
        int r=0,l=0;
        TreeNode* p=root;
        while(p->left!=NULL) {
            p=p->left;
            ++l;
        }
        p=root;
        while(p->right!=NULL) {
            p=p->right;
            ++r;
        }
        if(l==r) {
            return pow(2,r+1)-1;
        }
        else {
            return countNodes(root->left)+countNodes(root->right)+1;
        }
    }
};
