Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty()) {
            return 0;
        }
        int** re=new int*[grid.size()];
        for(int i=0;i!=grid.size();++i) {
            re[i]=new int[grid[0].size()];
        }
        re[0][0]=grid[0][0];
        for(int i=1;i!=grid.size();++i) {
            re[i][0]=re[i-1][0]+grid[i][0];
        }
        for(int i=1;i!=grid[0].size();++i) {
            re[0][i]=re[0][i-1]+grid[0][i];
        }
        for(int i=1;i!=grid.size();++i) {
            for(int j=1;j!=grid[0].size();++j) {
                if(re[i][j-1]<re[i-1][j]) {
                    re[i][j]=re[i][j-1]+grid[i][j];
                }
                else {
                    re[i][j]=re[i-1][j]+grid[i][j];
                }
            }
        }
        int sum=re[grid.size()-1][grid[0].size()-1];
        for(int i=0;i!=grid.size();++i) {
            delete [] re[i];
        }
        delete [] re;
        return sum;
    }
};
