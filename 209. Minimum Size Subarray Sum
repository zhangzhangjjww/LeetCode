Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.


class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        if(n==0) {
            return 0;
        }
        int sum=numeric_limits<int>::max();
        int pos=numeric_limits<int>::max();
        for(int i=0;i!=n;++i) {
            sum=0;
            for(int j=i;j!=n;++j) {
                sum+=nums[j];
                if(sum>=s&&pos>j-i+1) {
                    pos=j-i+1;
                }
            }
        }
        if(pos==numeric_limits<int>::max()) {
            return 0;
        }
        else {
            return pos;
        }
    }
};
