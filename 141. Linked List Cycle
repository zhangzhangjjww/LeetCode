Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL) {
            return false;
        }
        map<ListNode*,int> m;
        ListNode* p=head;
        m[p]=1;
        p=p->next;
        while(p) {
            if(m.count(p)) {
                return true;
            }
            else {
                m[p]=1;
            }
            p=p->next;
        }
        return false;
    }
};
