You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p1=new ListNode(0);
        ListNode* re=p1;
        int v1=0;
        while(l1!=0&&l2!=0) {
            int sum=l1->val+l2->val+v1;
            if(sum>=10) {
                sum=sum%10;
                v1=1;
            }
            else {
                v1=0;
            }
            ListNode* p2=new ListNode(sum);
            re->next=p2;
            re=p2;
            l1=l1->next;
            l2=l2->next;
    }
    while(l1==0&&l2!=0) {
        int sum=l2->val+v1;
        if(sum>=10) {
            sum=sum%10;
            v1=1;
        }
        else {
            v1=0;
        }
        ListNode* p2=new ListNode(sum);
        re->next=p2;
        re=p2;
        l2=l2->next;
    }
    while(l2==0&&l1!=0) {
        int sum=l1->val+v1;
        if(sum>=10) {
            sum=sum%10;
            v1=1;
        }
        else {
            v1=0;
        }
        ListNode* p2=new ListNode(sum);
        re->next=p2;
        re=p2;
        l1=l1->next;
    }
    if(v1==1) {
        ListNode* p2=new ListNode(1);
        re->next=p2;
    }
    return p1->next;
    }
        
};
