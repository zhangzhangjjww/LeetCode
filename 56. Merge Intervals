Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    void heapify(vector<Interval>& v,int i,int heap_size) {
        int left=2*i+1;
        int right=2*(i+1);
        int largest;
        if(left<heap_size&&v[left].start>v[i].start) {
            largest=left;
        }
        else {
            largest=i;
        }
        if(right<heap_size&&v[right].start>v[largest].start) {
            largest=right;
        }
        if(largest!=i) {
            Interval tmp=v[i];
            v[i]=v[largest];
            v[largest]=tmp;
            heapify(v,largest,heap_size);
        }
    }
    void build_max_heap(vector<Interval>& v) {
        int sz=v.size()/2;
        for(int i=sz;i!=-1;--i) {
            heapify(v,i,v.size());
        }
    }
    void heap_sort(vector<Interval>& v) {
        build_max_heap(v);
        int heap_size=v.size();
        for(int i=v.size()-1;i!=0;--i) {
            Interval tmp=v[0];
            v[0]=v[i];
            v[i]=tmp;
            --heap_size;
            heapify(v,0,heap_size);
        }
    }
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> re;
        if(intervals.empty()) {
            return re;
        }
        if(intervals.size()==1) {
            re=intervals;
            return re;
        }
        heap_sort(intervals);
        for(int i=0;i!=intervals.size();++i) {
            test(re,intervals[i]);
        }
        return re;
    }
    void test(vector<Interval>& re,Interval in) {
        if(re.empty()) {
            re.push_back(in);
        }
        else {
            int i;
            for(i=0;i!=re.size();++i) {
                if(re[i].start<in.start&&in.start<=re[i].end&&in.end>re[i].end) {
                    re[i].end=in.end;
                    break;
                }
                if((re[i].start<=in.start&&in.end<=re[i].end)||(in.start<=re[i].start&&re[i].end<=in.end)) {
                    re[i].start=in.start>re[i].start?re[i].start:in.start;
                    re[i].end=in.end>re[i].end?in.end:re[i].end;
                    break;
                }
            }
            if(i==re.size()) {
                re.push_back(in);
            }
        }
    }
};
