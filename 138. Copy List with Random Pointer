A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.



/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head==NULL) {
            return NULL;
        }
        map<RandomListNode*,RandomListNode*> m;
        RandomListNode* pre=NULL,* hp=head;
        RandomListNode* h=new RandomListNode(head->label);
        m[head]=h;
        hp=hp->next;
        pre=h;
        while(hp) {
            RandomListNode* tmp=new RandomListNode(hp->label);
            m[hp]=tmp;
            pre->next=tmp;
            pre=tmp;
            hp=hp->next;
        }
        RandomListNode* r=head;
        while(r) {
            if(r->random!=NULL) {
                m[r]->random=m[r->random];
            }
            r=r->next;
        }
        return h;
    }
};
