Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(head==NULL) {
            return head;
        }
        ListNode* pre=NULL,*p=head;
        ListNode* start=NULL,*end=NULL,*phead=head;
        bool line=false;
        int count=1;
        while(p) {
            ListNode* tmp=p->next;
            if(count==m) {
                start=pre;
                end=p;
                line=true;
            }
            if(line) {
                if(count!=m) {
                    p->next=pre;
                }
                if(count==n) {
                    if(m==1) {
                        phead=p;
                    } 
                    else {
                        start->next=p;
                    }
                    end->next=tmp;
                    pre=end;
                    p=tmp;
                    ++count;
                    line=false;
                    continue;
                }
            }
            pre=p;
            p=tmp;
            ++count;
        }
        return phead;
    }
};
