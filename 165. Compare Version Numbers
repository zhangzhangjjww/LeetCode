Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37


class Solution {
public:
    int compareVersion(string version1, string version2) {
        int key;
        vector<int> v1,v2;
        string tmp;
        for(int i=0;i!=version1.size();++i) {
            if(version1[i]!='.') {
                tmp+=version1[i];
            }
            else {
                v1.push_back(change(tmp));
                string s;
                tmp=s;
            }
        }
        v1.push_back(change(tmp));
        string s;
        for(int i=0;i!=version2.size();++i) {
            if(version2[i]!='.') {
                s+=version2[i];
            }
            else {
                v2.push_back(change(s));
                string s2;
                s=s2;
            }
        }
        v2.push_back(change(s));
        int pos=0;
        while(pos<v1.size()&&pos<v2.size()) {
            if(v1[pos]>v2[pos]) {
                return 1;
            }
            else {
                if(v1[pos]<v2[pos]) {
                    return -1;
                }
                else {
                    ++pos;
                }
            }
        }
        while(pos<v1.size()) {
            if(v1[pos]!=0) {
                return 1;
            }
            else {
                ++pos;
            }
        }
        while(pos<v2.size()) {
            if(v2[pos]!=0) {
                return -1;
            }
            else {
                ++pos;
            }
        }
        return 0;
    }
    int change(string& s) {
        int re=0;
        for(int i=0;i!=s.size();++i) {
            re+=re*10+s[i]-'0';
        }
        return re;
    }
};
