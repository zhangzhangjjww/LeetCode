Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> re;
        if(root==NULL) {
            return re;
        }
        deque<TreeNode*> q1;
        q1.push_back(root);
        int count=1;
        while(!q1.empty()) {
            vector<int> v;
            deque<TreeNode*> q2;
            if(count%2==0) {
                solve(q1,q2,v);
            }
            else {
                solve2(q1,q2,v);
            }
            re.push_back(v);
            q1=q2;
            ++count;
        }
        return re;
    }
    void solve(deque<TreeNode*>& q1,deque<TreeNode*>& q2,vector<int>& v) {
        while(!q1.empty()) {
            TreeNode* tmp=q1.back();
            if(tmp->right) {
                q2.push_back(tmp->right);
            }
            if(tmp->left) {
                q2.push_back(tmp->left);
            }
            v.push_back(tmp->val);
            q1.pop_back();
        }
    }
    void solve2(deque<TreeNode*>& q1,deque<TreeNode*>& q2,vector<int>& v) {
        while(!q1.empty()) {
            TreeNode* tmp=q1.back();
            if(tmp->left) {
                q2.push_back(tmp->left);
            }
            if(tmp->right) {
                q2.push_back(tmp->right);
            }
            v.push_back(tmp->val);
            q1.pop_back();
        }
    }
};
