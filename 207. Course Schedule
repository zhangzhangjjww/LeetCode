There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.



class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        int* begin=new int[numCourses];
        int* finish=new int[numCourses];
        int* color=new int[numCourses];
        for(int i=0;i!=numCourses;++i) {
            begin[i]=0;
            finish[i]=0;
            color[i]=-1;
        }
        int t=0;
        for(int i=0;i!=numCourses;++i) {
            if(color[i]==-1) {
                DFS_VISIT(i,begin,finish,color,t,prerequisites);
            }
        }
        bool re=true;
        for(int i=0;i!=prerequisites.size();++i) {
            int u=prerequisites[i].first;
            int v=prerequisites[i].second;
            if(begin[v]<=begin[u]&&finish[u]<=finish[v]) {
                re=false;
                break;
            }
        }
        delete [] begin;
        delete [] finish;
        delete [] color;
        return re;
    }
    void DFS_VISIT(int i,int* begin,int* finish,int* color,int& t,vector<pair<int,int>>& prerequisites) {
        color[i]=0;
        ++t;
        begin[i]=1;
        for(int j=0;j!=prerequisites.size();++j) {
            if(prerequisites[j].first==i&&color[prerequisites[j].second]==-1) {
                DFS_VISIT(prerequisites[j].second,begin,finish,color,t,prerequisites);
            }
        }
        ++t;
        finish[i]=t;
        color[i]=1;
    }
};
