Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4



class LRUCache {
private:
    int pos;
    int* nums;
    int* val;
    int* rank;
    map<int,int> m;
    int sz;
    bool is_full;
    int min;
    int t;
    void set_min() {
        int tmp=0;
        if(!is_full) {
            for(int i=0;i!=pos;++i) {
                if(rank[tmp]>rank[i]) {
                    tmp=i;
                }
            }
            min=tmp;
            return;
        }
        for(int i=0;i!=sz;++i) {
            if(rank[tmp]>rank[i]) {
                tmp=i;
            }
        }
        min=tmp;
    }
public:
    LRUCache(int capacity) {
        pos=0;
        nums=new int[capacity];
        val=new int[capacity];
        rank=new int[capacity];
        for(int i=0;i!=capacity;++i) {
            val[i]=0;
            rank[i]=0;
        }
        sz=capacity;
        is_full=false;
        min=0;
        t=0;
    }
    
    int get(int key) {
        if(m.count(key)==0) {
            return -1;
        }
        else {
            ++t;
            rank[m[key]]=t;
            set_min();
            return nums[m[key]];
        }
    }
    
    void put(int key, int value) {
        ++t;
        if(m.count(key)) {
            nums[m[key]]=value;
            rank[m[key]]=t;
            set_min();
        }
        else {
            if(is_full) {
                m.erase(val[min]);
                val[min]=key;
                nums[min]=value;
                rank[min]=t;
                m[key]=min;
                set_min();
            }
            else {
                val[pos]=key;
                nums[pos]=value;
                m[key]=pos;
                rank[pos]=t;
                ++pos;
                if(pos==sz) {
                    is_full=true;
                }
            }
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
