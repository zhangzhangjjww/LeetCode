Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

class Solution {
public:
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        vector<vector<bool>> f(m+1,vector<bool>(n+1,false));
        f[0][0]=true;
        for(int i=1;i!=m+1;++i) {
            f[i][0]=false;
        }
        for(int j=1;j!=n+1;++j) {
            f[0][j]=(p[j-1]=='*')&&f[0][j-1];
        }
        for(int j=1;j!=n+1;++j) {
            for(int i=1;i!=m+1;++i) {
                if(p[j-1]!='*') {
                    f[i][j]=(s[i-1]==p[j-1]||p[j-1]=='?')&&f[i-1][j-1];
                }
                else {
                    f[i][j]=(f[i-1][j])||f[i][j-1];
                }
            }
        }
        return f[m][n];
    }
};
