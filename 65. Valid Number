Validate if a given string is numeric.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.



class Solution {
public:
    bool isNumber(string s) {
        if(s.empty()) {
            return true;
        }
        bool space=false;
        bool point=false;
        bool number=false;
        bool exponent=false;
        bool number_after_e=true;
        int start=0,end=s.size()-1;
        while(start<s.size()) {
            if(s[start]==' ') {
                ++start;
            }
            else {
                break;
            }
        }
        if(start==s.size()) {
            return false;
        }
        while(end>-1) {
            if(s[end]==' ') {
                --end;
            }
            else break;
        }
        string re;
        for(int i=start;i!=end+1;++i) {
            re+=s[i];
        }
        for(int i=0;i!=re.size();++i) {
            if(re[i]=='.') {
                if(point||exponent) {
                    return false;
                }
                else {
                    point=true;
                }
            }
            else {
                if(re[i]=='e'||re[i]=='E') {
                    if(exponent||!number) {
                        return false;
                    }
                    else {
                        exponent=true;
                        number_after_e=false;
                    }
                }
                else {
                    if(re[i]>='0'&&re[i]<='9') {
                        number=true;
                        number_after_e=true;
                    }
                    else {
                        if(re[i]=='-'||re[i]=='+') {
                            if(i==0||re[i-1]=='e'||re[i-1]=='E') {
                                
                            }
                            else {
                                return false;
                            }
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
        }
        return number&number_after_e;
    }
};
